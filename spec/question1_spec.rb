require "../src/fetch_not_working_servers"

RSpec.describe "故障しているサーバとその期間を解析する" do
  context "1回でもタイムアウトしたら故障とみなす" do
    DEFAUTL_TIMES = 1
    it "一つのサーバが最初からタイムアウトする" do
      input = [
        ["20201019133124", "10.20.30.1/16", "-"],
        ["20201019133125", "10.20.30.2/16", "1"],
        ["20201019133134", "192.168.1.1/24", "10"],
        ["20201019133135", "192.168.1.2/24", "5"],
        ["20201019133224", "10.20.30.1/16", "522"],
        ["20201019133234", "192.168.1.1/24", "8"]
      ]
      output = [
        {"address" => "10.20.30.1/16", "from" => "20201019133124", "to" => "20201019133224"}
      ]
      expect(fetch_not_working_servers(input, DEFAUTL_TIMES)).to eq output
    end
    it "一つのサーバが途中からタイムアウトする" do
      input = [
        ["20201019132125", "10.20.30.1/16", "1"],
        ["20201019133124", "10.20.30.1/16", "-"],
        ["20201019133134", "192.168.1.1/24", "10"],
        ["20201019133135", "192.168.1.2/24", "5"],
        ["20201019133224", "10.20.30.1/16", "522"],
        ["20201019133234", "192.168.1.1/24", "8"]
      ]
      output = [
        {"address" => "10.20.30.1/16", "from" => "20201019133124", "to" => "20201019133224"}
      ]
      expect(fetch_not_working_servers(input, DEFAUTL_TIMES)).to eq output
    end
    it "一つのサーバがタイムアウトしたまま終了する" do
      input = [
        ["20201019133120", "10.20.30.1/16", "1"],
        ["20201019133124", "10.20.30.1/16", "-"],
        ["20201019133134", "192.168.1.1/24", "10"],
        ["20201019133135", "192.168.1.2/24", "5"],
        ["20201019133234", "192.168.1.1/24", "8"]
      ]
      output = [
        {"address" => "10.20.30.1/16", "from" => "20201019133124", "to" => NOT_FIX_MESSAGE}
      ]
      expect(fetch_not_working_servers(input, DEFAUTL_TIMES)).to eq output
    end
    it "一つのサーバが長期間タイムアウトを挟み復旧する" do
      input = [
        ["20201019133124", "10.20.30.1/16", "-"],
        ["20201019133125", "10.20.30.2/16", "1"],
        ["20201019133134", "10.20.30.1/16", "-"],
        ["20201019133135", "192.168.1.2/24", "5"],
        ["20201019133229", "10.20.30.1/16", "522"],
        ["20201019133234", "192.168.1.1/24", "8"]
      ]
      output = [
        {"address" => "10.20.30.1/16", "from" => "20201019133124", "to" => "20201019133229"}
      ]
      expect(fetch_not_working_servers(input, DEFAUTL_TIMES)).to eq output
    end
    it "一つのサーバが複数回タイムアウト->復旧を繰り返す" do
      input = [
        ["20201019133124", "10.20.30.1/16", "-"],
        ["20201019133125", "10.20.30.2/16", "1"],
        ["20201019133134", "10.20.30.1/16", "-"],
        ["20201019133135", "192.168.1.2/24", "5"],
        ["20201019133229", "10.20.30.1/16", "522"],
        ["20201019133234", "192.168.1.1/24", "8"],

        ["20201019233124", "10.20.30.2/16", "9"],
        ["20201019233125", "10.20.30.1/16", "1"],
        ["20201019233134", "10.20.30.1/16", "-"],
        ["20201019233135", "192.168.1.2/24", "5"],
        ["20201019233229", "10.20.30.1/16", "522"],
        ["20201019233234", "192.168.1.1/24", "8"]
      ]
      output = [
        {"address" => "10.20.30.1/16", "from" => "20201019133124", "to" => "20201019133229"},
        {"address" => "10.20.30.1/16", "from" => "20201019233134", "to" => "20201019233229"}
      ]
      expect(fetch_not_working_servers(input, DEFAUTL_TIMES)).to eq output
    end
    it "複数サーバがタイムアウトする" do
      input = [
        ["20201019133124", "10.20.30.1/16", "-"],
        ["20201019133125", "10.20.30.2/16", "1"],
        ["20201019133134", "10.20.30.1/16", "-"],
        ["20201019133135", "192.168.1.2/24", "-"],
        ["20201019133229", "10.20.30.1/16", "522"],
        ["20201019133234", "192.168.1.1/24", "8"],

        ["20201019233124", "192.168.1.2/24", "1"],
        ["20201019233125", "10.20.30.1/16", "1"],
        ["20201019233134", "10.20.30.1/16", "-"],
        ["20201019233135", "192.168.1.2/24", "5"],
        ["20201019233229", "10.20.30.1/16", "522"],
        ["20201019233234", "192.168.1.1/24", "8"]
      ]
      output = [
        {"address" => "10.20.30.1/16", "from" => "20201019133124", "to" => "20201019133229"},
        {"address" => "192.168.1.2/24", "from" => "20201019133135", "to" => "20201019233124"},
        {"address" => "10.20.30.1/16", "from" => "20201019233134", "to" => "20201019233229"}
      ]
      expect(fetch_not_working_servers(input, DEFAUTL_TIMES)).to eq output
    end
  end
  context "2回以上タイムアウトしたら故障とみなす" do
    TIMES = 2
    it "2回連続でタイムアウトしない" do
      input = [
        ["20201019133124", "10.20.30.1/16", "-"],
        ["20201019133125", "10.20.30.2/16", "1"],
        ["20201019133134", "10.20.30.1/16", "10"],
        ["20201019133135", "192.168.1.2/24", "-"],
        ["20201019133224", "10.20.30.1/16", "-"],
        ["20201019133234", "192.168.1.1/24", "8"]
      ]
      output = []
      expect(fetch_not_working_servers(input, TIMES)).to eq output
    end
    it "故障した後すぐに復旧する" do
      input = [
        ["20201019133124", "10.20.30.1/16", "-"],
        ["20201019133125", "10.20.30.2/16", "1"],
        ["20201019133134", "10.20.30.1/16", "-"],
        ["20201019133135", "192.168.1.2/24", "5"],
        ["20201019133224", "10.20.30.1/16", "1"],
        ["20201019133234", "192.168.1.1/24", "8"]
      ]
      output = [
        {"address" => "10.20.30.1/16", "from" => "20201019133134", "to" => "20201019133224"}
      ]
      expect(fetch_not_working_servers(input, TIMES)).to eq output
    end
    it "故障して最後まで復旧しない" do
      input = [
        ["20201019133124", "10.20.30.1/16", "-"],
        ["20201019133125", "10.20.30.2/16", "1"],
        ["20201019133134", "10.20.30.1/16", "-"],
        ["20201019133135", "192.168.1.2/24", "-"],
        ["20201019133224", "10.20.30.1/16", "-"],
        ["20201019133234", "192.168.1.1/24", "8"]
      ]
      output = [
        {"address" => "10.20.30.1/16", "from" => "20201019133134", "to" => NOT_FIX_MESSAGE}
      ]
      expect(fetch_not_working_servers(input, TIMES)).to eq output
    end
    it "一つのサーバが複数回故障" do
      input = [
        ["20201019133124", "10.20.30.1/16", "-"],
        ["20201019133125", "10.20.30.2/16", "1"],
        ["20201019133134", "10.20.30.1/16", "-"],
        ["20201019133135", "192.168.1.2/24", "5"],
        ["20201019133224", "10.20.30.1/16", "100"],
        ["20201019133234", "192.168.1.1/24", "8"],
        ["20201019133324", "10.20.30.1/16", "-"],
        ["20201019133325", "10.20.30.2/16", "1"],
        ["20201019133334", "10.20.30.1/16", "-"],
        ["20201019133335", "192.168.1.2/24", "5"],
        ["20201019133324", "10.20.30.1/16", "-"],
        ["20201019133434", "192.168.1.1/24", "8"],
        ["20201019133444", "10.20.30.1/16", "-"]
      ]
      output = [
        {"address" => "10.20.30.1/16", "from" => "20201019133134", "to" => "20201019133224"},
        {"address" => "10.20.30.1/16", "from" => "20201019133334", "to" => NOT_FIX_MESSAGE},
      ]
      expect(fetch_not_working_servers(input, TIMES)).to eq output
    end
    it "複数サーバが故障" do
      input = [
        ["20201019133124", "10.20.30.1/16", "-"],
        ["20201019133125", "10.20.30.2/16", "1"],
        ["20201019133134", "10.20.30.1/16", "-"],
        ["20201019133135", "192.168.1.2/24", "-"],
        ["20201019133224", "10.20.30.1/16", "100"],
        ["20201019133234", "192.168.1.1/24", "8"],
        ["20201019133324", "10.20.30.1/16", "-"],
        ["20201019133325", "10.20.30.2/16", "-"],
        ["20201019133326", "10.20.30.2/16", "-"],
        ["20201019133334", "10.20.30.1/16", "-"],
        ["20201019133335", "192.168.1.2/24", "-"],
        ["20201019133324", "10.20.30.1/16", "-"],
        ["20201019133434", "192.168.1.1/24", "8"],
        ["20201019133444", "10.20.30.1/16", "-"],
        ["20201019133526", "10.20.30.2/16", "1"]
      ]
      output = [
        {"address" => "10.20.30.1/16", "from" => "20201019133134", "to" => "20201019133224"},
        {"address" => "10.20.30.2/16", "from" => "20201019133326", "to" => "20201019133526"},
        {"address" => "10.20.30.1/16", "from" => "20201019133334", "to" => NOT_FIX_MESSAGE},
        {"address" => "192.168.1.2/24", "from" => "20201019133335", "to" => NOT_FIX_MESSAGE},
      ]
      expect(fetch_not_working_servers(input, TIMES)).to eq output
    end
  end
end