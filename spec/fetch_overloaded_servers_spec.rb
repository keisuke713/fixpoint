require "../src/fetch_overloaded_servers"

RSpec.describe "過負荷のサーバーを解析する" do
  context "1回でもタイムアウトしたら故障とみなす" do
    it "test" do
      expect(fetch_overloaded_servers([],1,1)).to eq [1]
    end
  end
  context "2回以上タイムアウトしたら故障とみなす" do
  end
  it "指定の回数ログが出力されなかった場合" do
    input = [
      ["20201019133124", "10.20.30.1/16", "-"],
      ["20201019133134", "192.168.1.1/24", "10"],
      ["20201019133224", "10.20.30.1/16", "522"],
      ["20201019133234", "192.168.1.1/24", "8"],
      ["20201019133254", "10.20.30.1/16", "10"],
    ]
    output = []
    expect(fetch_overloaded_servers(input, 3, 2)).to eq output
  end
  it "平均値が基準を満たさない場合" do
    input = [
      ["20201019133124", "10.20.30.1/16", "-"],
      ["20201019133125", "10.20.30.1/16", "3"],
      ["20201019133134", "10.20.30.1/16", "6"],
      ["20201019133135", "10.20.30.1/16", "3"],
    ]
    output = []
    expect(fetch_overloaded_servers(input, 2, 5)).to eq output
  end
  it "一度平均値が基準値を超える" do
    input = [
      ["20201019133124", "10.20.30.1/16", "6"],
      ["20201019133125", "10.20.30.1/16", "3"],
      ["20201019133134", "10.20.30.1/16", "7"],
      ["20201019133135", "10.20.30.1/16", "2"],
    ]
    output = [
      {"address" => "10.20.30.1/16", "from" => "20201019133125", "to" => "20201019133134"}
    ]
    expect(fetch_overloaded_servers(input, 2, 5)).to eq output
  end
  it "複数回平均値が基準値を超える" do
    input = [
      ["20201019133124", "10.20.30.1/16", "6"],
      ["20201019133125", "10.20.30.1/16", "4"],
      ["20201019133134", "10.20.30.1/16", "5"],
      ["20201019133135", "10.20.30.1/16", "5"],
    ]
    output = [
      {"address" => "10.20.30.1/16", "from" => "20201019133124", "to" => "20201019133125"},
      {"address" => "10.20.30.1/16", "from" => "20201019133134", "to" => "20201019133135"}
    ]
    expect(fetch_overloaded_servers(input, 2, 5)).to eq output
  end
  it "複数サーバの平均値が基準値を超える" do
    input = [
      ["20201019133124", "10.20.30.1/16", "7"],
      ["20201019133125", "10.20.30.2/16", "4"],
      ["20201019133134", "10.20.30.1/16", "8"],
      ["20201019133135", "10.20.30.1/16", "1"],
      ["20201019133136", "10.20.30.2/16", "5"],
      ["20201019133137", "10.20.30.1/16", "2"],
      ["20201019133138", "10.20.30.2/16", "2"],
      ["20201019133139", "10.20.30.2/16", "8"],
      ["20201019133140", "10.20.30.1/16", "12"]
    ]
    output = [
      {"address" => "10.20.30.1/16", "from" => "20201019133124", "to" => "20201019133135"},
      {"address" => "10.20.30.2/16", "from" => "20201019133136", "to" => "20201019133139"},
      {"address" => "10.20.30.1/16", "from" => "20201019133135", "to" => "20201019133140"}
    ]
    expect(fetch_overloaded_servers(input, 3, 5)).to eq output
  end
end